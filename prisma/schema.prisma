// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  userName         String            @unique
  emailAddress     String            @unique
  password         String
  emailVerifiedAt  DateTime?
  roles            Role
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  //relations
  emailValidations EmailValidation[] @relation("UserEmailValidations")
  restaurants      Restaurant[]      @relation("UserRestaurant")
}

model EmailValidation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  active    Boolean  @default(false)
  hash      String?
  createdAt DateTime @default(now())
  //relations
  user      User?    @relation("UserEmailValidations", fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model Restaurant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdBy String
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //relations
  user       User?        @relation("UserRestaurant", fields: [userId], references: [id])
  userId     String?      @db.ObjectId
  ordering   Ordering[]   @relation("RestaurantOrdering")
  order      Order[]      @relation("RestaurantOrder")
  setting    Setting[]    @relation("RestaurantSetting")
  location   Location[]   @relation("RestaurantLocation")
  contact    Contact[]    @relation("RestaurantContact")
  seoSetting SeoSetting[] @relation("RestaurantSeoSetting")
}

model Payment {
  id                      String          @id @default(auto()) @map("_id") @db.ObjectId
  ownerEmail              String
  statementType           StatementStatus
  payoutFrequency         String
  feeFlatAmount           Int
  feePercentageAmount     Int
  trialEndDate            DateTime
  processingFeePercentage Int
  orderReceiveType        String
  createdBy               String
  updateBy                String
  //relations
  order                   Order?          @relation("OrderPayment", fields: [orderId], references: [id])
  orderId                 String?         @db.ObjectId
}

model Order {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  customerName        String
  customerPhoneNumber String
  Status              OrderStatus
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  //relations
  payments     Payment[]   @relation("OrderPayment")
  restaurant   Restaurant? @relation("RestaurantOrder", fields: [restaurantId], references: [id])
  restaurantId String?     @db.ObjectId


  // shipping
}

model Ordering {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  minimumPickUpOrder       Int
  minimumDelivery          Int
  pickUpEstimate           String
  deliveryEstimate         String
  onlineDiscountPercentage Int
  isDeliveryPaused         Boolean
  isNoScheduledOrders      Boolean
  stopOrdersForToday       Boolean
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  //relations
  restaurant   Restaurant? @relation("RestaurantOrdering", fields: [restaurantId], references: [id])
  restaurantId String?     @db.ObjectId

}

model Setting {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  Name             String
  IsOpen           Boolean
  showOnFront      String
  status           RestaurantStatus
  PaymentType      PaymentType
  shopLink         String
  Chain            String
  Description      String
  agreementSigned  DateTime
  logoImgLink      String
  lpImgMobileLink  String
  lpImgDesktopLink String
  bannerText       String
  accountManagerId String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  //relations
  restaurant       Restaurant?      @relation("RestaurantSetting", fields: [restaurantId], references: [id])
  restaurantId     String?          @db.ObjectId
}

enum StatementStatus {
  Paid    @map("paid")
  Unpaid  @map("unpaid")

  @@map("StatementStatus")
}

model Location {
  id                  String      @id @default(auto()) @map("_id") @db.ObjectId
  RestaurantAddress   String
  RestaurantCity      String
  RestaurantState     String
  RestaurantZipCode   String
  RestaurantLatitude  Int
  RestaurantLongitude Int
  RestaurantTimeZone  String
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  //relations
  restaurant          Restaurant? @relation("RestaurantLocation", fields: [restaurantId], references: [id])
  restaurantId        String?     @db.ObjectId
}

model Contact {
  id                    String      @id @default(auto()) @map("_id") @db.ObjectId
  OwnerName             String
  OwnerEmail            String
  OwnerPhone            String
  SecondaryContactName  String
  SecondaryContactEmail String
  SecondaryContactPhone String
  RestaurantPhone       String
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  //relations
  restaurant            Restaurant? @relation("RestaurantContact", fields: [restaurantId], references: [id])
  restaurantId          String?     @db.ObjectId
}

model SeoSetting {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  GMBDomain        String
  ownWebsiteLink   String
  IsDomainLocked   Boolean
  PriceRange       String
  GMBStatus        GMBStatus
  GMBRole          GMBRole
  GMBEmail         String
  GMBPassword      String
  GMBOwner         GMBOwner
  AppleMapEmail    String
  AppleMapPassword String
  AppleMapOwner    String
  AppleMapStatus   String
  //relations
  restaurant       Restaurant? @relation("RestaurantSeoSetting", fields: [restaurantId], references: [id])
  restaurantId     String?     @db.ObjectId
}

enum GMBStatus {
  verified     @map("verified")
  NotVerified  @map("notVerified")
  Suspended    @map("suspended")

  @@map("GMBStatus")
}

enum GMBOwner {
  Competitor  @map("competitor")
  Manager     @map("manager")

  @@map("GMBOwner")
}

enum GMBRole {
  PrimaryOwner  @map("primaryOwner")
  Manager       @map("manager")
  Owner         @map("owner")
  verified      @map("verified")
  NotVerified   @map("notVerified")
  Suspended     @map("suspended")

  @@map("GMBRole")
}

enum Role {
  Admin       @map("admin")
  Sales       @map("sales")
  Menu        @map("menu")
  Support     @map("support")
  Accounting  @map("accounting")

  @@map("role")
}

enum PaymentType {
  directDeposit  @map("directDeposit")

  @@map("paymentType")
}

enum RestaurantStatus {
  Live               @map("live")
  TemporarilyPaused  @map("Temporarily Paused")
  M2M                @map("M2M")
  Disabled           @map("Disabled")

  @@map("RestaurantStatus")
}

enum OrderStatus {
  Successfull  @map("successfull")
  Rejected     @map("rejected")
  Flagged      @map("flagged")
  Adjusted     @map("adjusted")

  @@map("OrderStatus")
}
