// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  userName         String            @unique
  emailAddress     String            @unique
  password         String
  emailVerifiedAt  DateTime?
  roles            Role
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  emailValidations EmailValidation[] @relation("UserEmailValidations")
  restaurants Restaurant[] @relation("UserRestaurant")
}

model EmailValidation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  active    Boolean  @default(false)
  hash      String?
  createdAt DateTime @default(now())
  user      User?    @relation("UserEmailValidations", fields: [userId], references: [id])
  userId    String?
}

enum Role {
  Admin       @map("admin")
  Sales       @map("sales")
  Menu        @map("menu")
  Support     @map("support")
  Accounting  @map("accounting")

  @@map("role")
}

enum PaymentType {
  directDeposit       @map("directDeposit")

  @@map("paymentType")
}

enum RestaurantStatus {
  Admin       @map("live")
  Sales       @map("Temporarily Paused")
  Menu        @map("M2M")
  Support     @map("Disabled")
  Accounting  @map("accounting")

  @@map("Restaurant")
}


model Restaurant {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  Name         String            @unique
  logo     String            //photo
  webHeader         String  //photo
  mobileHeader  String //photo
  Status            Role 
  PaymentType PaymentType
  
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  user      User?    @relation("UserRestaurant", fields: [userId], references: [id])
  userId    String?
  orderings Ordering[] @relation("RestaurantOrdering")
}

model Order{
  id      String            @id @default(auto()) @map("_id") @db.ObjectId
  customerName String
  customerPhoneNumber String
Status OrderStatus
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

//relations
// payment 
// shipping 
// Restaurant
}

enum OrderStatus {
  Successfull       @map("successfull")
  Rejected       @map("rejected")
  Flagged        @map("flagged")
  Adjusted     @map("adjusted")

  @@map("OrderStatus")
}

model Ordering{
id      String            @id @default(auto()) @map("_id") @db.ObjectId
minimumPickUpOrder  Int
minimumDelivery Int
pickUpEstimate Int
deliveryEstimate Int
onlineDiscount Int
pauseDeliveryForToday Boolean
noScheduledOrders Boolean
stopOrdersForToday Boolean
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

restaurant      Restaurant?    @relation("RestaurantOrdering", fields: [restaurantId], references: [id])
restaurantId    String?

}

model Statement{
  id String            @id @default(auto()) @map("_id") @db.ObjectId
  Status StatementStatus
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

}

enum StatementStatus {
  Paid       @map("paid")
  Unpaid       @map("unpaid")
  
  @@map("StatementStatus")
}

model Contact{
  id String            @id @default(auto()) @map("_id") @db.ObjectId
  OwnerName String
  OwnerEmail String
  OwnerPhone String
  SecondaryContactName String
  SecondaryContactEmail String
  SecondaryContactPhone String
  RestaurantPhone String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

}

enum GMBStatus {
  verified       @map("verified")
NotVerified       @map("notVerified")
  Suspended       @map("suspended")
  
  @@map("GMBStatus")
}

enum GMBOwner {
  Competitor       @map("competitor")
  Manager       @map("manager")
  
  @@map("GMBOwner")
}

enum GMBRole {
  PrimaryOwner       @map("primaryOwner")
  Manager   @map("manager")
  Owner       @map("owner")
  verified       @map("verified")
NotVerified       @map("notVerified")
  Suspended       @map("suspended")
  
  @@map("GMBRole")
}

model SeoSetting{
id String            @id @default(auto()) @map("_id") @db.ObjectId
GMBDomain String 
ownWebsite String
GMBStatus GMBStatus  
GMBRole GMBRole  
MNDomain String 
GMBEmail String 
Password String 
GMBOwner  GMBOwner

}